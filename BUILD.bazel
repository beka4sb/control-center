load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("//saq/common/build/javascript:package.bzl", "package_json")
load("@npm//:webpack-cli/package_json.bzl", webpack_cli = "bin")
load("@aspect_rules_js//js:defs.bzl", "js_run_devserver", "js_test")
load("@npm//:webpack/package_json.bzl", webpack_bin = "bin")
load("@aspect_rules_jest//jest:defs.bzl", "jest_test")

package(default_visibility = ["//saq/pqc/control-center:__subpackages__"])

package_json(
    src = "package.json.local",
)

webpack_bin.webpack_binary(
    name = "webpack_binary",
)

COMMON_SRC_FILES = glob([
    "src/**",
    "public/**",
]) + [
    "tsconfig.json",
    "webpack.common.js",
]

DEV_SRC_FILES = COMMON_SRC_FILES + glob([
    "jestUtils/**",
    "tests/**",
]) + [
    "webpack.dev.js",
    "webpack.test.js",
]

COMMON_DEPENDENCIES = [
    "//:node_modules/@apollo/client",
    "//:node_modules/@fontsource/roboto",
    "//:node_modules/@mui/icons-material",
    "//:node_modules/@mui/lab",
    "//:node_modules/@mui/material",
    "//:node_modules/@svgr/webpack",
    "//:node_modules/@types/node",
    "//:node_modules/@types/prop-types",
    "//:node_modules/@types/react",
    "//:node_modules/@types/react-dom",
    "//:node_modules/axios",
    "//:node_modules/case-sensitive-paths-webpack-plugin",
    "//:node_modules/copy-webpack-plugin",
    "//:node_modules/css-loader",
    "//:node_modules/dotenv",
    "//:node_modules/dotenv-webpack",
    "//:node_modules/file-loader",
    "//:node_modules/graphql",
    "//:node_modules/html-react-parser",
    "//:node_modules/html-webpack-plugin",
    "//:node_modules/is_js",
    "//:node_modules/i18next",
    "//:node_modules/moment",
    "//:node_modules/nodemon",
    "//:node_modules/notistack",
    "//:node_modules/prop-types",
    "//:node_modules/react",
    "//:node_modules/react-app-polyfill",
    "//:node_modules/react-dev-utils",
    "//:node_modules/react-dom",
    "//:node_modules/react-i18next",
    "//:node_modules/react-refresh",
    "//:node_modules/react-router-dom",
    "//:node_modules/recharts",
    "//:node_modules/resolve",
    "//:node_modules/resolve-url-loader",
    "//:node_modules/source-map-loader",
    "//:node_modules/style-loader",
    "//:node_modules/ts-loader",
    "//:node_modules/typescript",
    "//:node_modules/web-vitals",
    "//:node_modules/webpack",
    "//:node_modules/webpack-dev-server",
    "//:node_modules/webpack-manifest-plugin",
    "//:node_modules/webpack-merge",
    "//:node_modules/workbox-webpack-plugin",
    "//:node_modules/launchdarkly-js-client-sdk",
    "//:node_modules/lodash",
    "//:node_modules/material-ui-popup-state",
    "//:node_modules/@testing-library/dom",
    "//:node_modules/@testing-library/jest-dom",
    "//:node_modules/@testing-library/react",
    "//:node_modules/@testing-library/user-event",
    "//:node_modules/@types/testing-library__jest-dom",
    "//:node_modules/@types/jest",
    "//:node_modules/@types/lodash",
    "//:node_modules/@mui/x-data-grid",
    "//:node_modules/@storybook/react",
    "//:node_modules/jest-transform-stub",
    "//:node_modules/jest-transformer-svg",
    "//:node_modules/uuid",
]

DEV_DEPENDENCIES = COMMON_DEPENDENCIES + [
    "//:node_modules/jest",
    "//:node_modules/@storybook/addon-actions",
    "//:node_modules/@storybook/addon-essentials",
    "//:node_modules/@storybook/addon-interactions",
    "//:node_modules/@storybook/addon-links",
    "//:node_modules/@storybook/builder-webpack5",
    "//:node_modules/@storybook/manager-webpack5",
    "//:node_modules/@storybook/testing-library",
    "//:node_modules/jest-environment-jsdom",
    "//:node_modules/ts-jest",
    "//:node_modules/@ngneat/falso",
    "//:node_modules/@types/uuid",
]

# Used for building for production with: `bazel build //saq/pqc/control-center:build-prod`
webpack_cli.webpack_cli(
    name = "build-prod",
    srcs = COMMON_SRC_FILES + COMMON_DEPENDENCIES + ["webpack.prod.js"],
    outs = ["out/prod"],
    args = [
        "build",
        "--config webpack.prod.js",
        "--mode production",
        "--output-path out/prod",
    ],
    chdir = package_name(),
    env = {
        "LAUNCHDARKLY_CLIENT_SIDE_ID": "$(LAUNCHDARKLY_CLIENT_SIDE_ID)",
    },
)

# Used for building with: `bazel build //saq/pqc/control-center:build-dev`
# Used for building with live reload: `ibazel build //saq/pqc/control-center:build-dev`
webpack_cli.webpack_cli(
    name = "build-dev",
    srcs = DEV_SRC_FILES + DEV_DEPENDENCIES + glob([".env"]),
    outs = ["out/dev"],
    args = [
        "build",
        "--config webpack.dev.js",
        "--mode development",
        "--output-path out/dev",
    ],
    chdir = package_name(),
)

# Used for running with: `bazel run //saq/pqc/control-center:start-dev`
# Used for running with live reload: `ibazel run //saq/pqc/control-center:start-dev`
js_run_devserver(
    name = "start-dev",
    args = [
        "serve",
        "--config",
        "webpack.dev.js",
    ],
    chdir = package_name(),
    data = DEV_SRC_FILES + DEV_DEPENDENCIES + glob([".env"]),
    tool = "webpack_binary",
)

# Used for running with: `bazel run //saq/pqc/control-center:start-test`
# Used for running with live reload: `ibazel run //saq/pqc/control-center:start-test`
js_run_devserver(
    name = "start-test",
    args = [
        "serve",
        "--config",
        "webpack.test.js",
    ],
    chdir = package_name(),
    data = DEV_SRC_FILES + DEV_DEPENDENCIES,
    tool = "webpack_binary",
)

# Used for running with: `bazel test //saq/pqc/control-center:build-dev-test`
# Acts as a sanity check to ensure we don't break CryptoSense presubmit builds.
build_test(
    name = "build-dev-test",
    targets = [":build-dev"],
)

# Used for running jest tests with: `bazel test //saq/pqc/control-center:run-test`
jest_test(
    name = "run-test",
    config = "jest.config.json",
    data = DEV_SRC_FILES + DEV_DEPENDENCIES,
)
